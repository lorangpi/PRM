(define (domain miconic)

(:requirements
  :typing
  :hierachie)

(:types passenger - object floor - object)

(:predicates (origin ?person - passenger ?floor - floor) (destin ?person - passenger ?floor - floor) (above ?floor1 - floor ?floor2 - floor) (boarded ?person - passenger) (not-boarded ?person - passenger) (served ?person - passenger) (not-served ?person - passenger) (lift-at ?floor - floor))

(:task do_problem
  :parameters () )

(:task do_check_floor
  :parameters (?f - floor) )

(:task do_take_all
  :parameters (?f - floor) )

(:task do_start_throw_all
  :parameters () )

(:task do_throw_all
  :parameters (?f - floor) )

(:method m0_do_problem
  :parameters ( ?f - floor )
  :task (do_problem )
  :precondition(and (lift-at ?f))
  :ordered-subtasks(and (t1 (do_check_floor ?f)) (t2 (do_take_all ?f)) (t3 (do_start_throw_all))) ) 

(:method m1_do_check_floor
  :parameters ( ?f - floor )
  :task (do_check_floor ?f)
  :precondition(and (lift-at ?f))
  :ordered-subtasks(and (t1 (nop))) ) 

(:method m2_do_check_floor
  :parameters ( ?f - floor ?p - passenger )
  :task (do_check_floor ?f)
  :precondition(and (lift-at ?f) (boarded ?p) (destin ?p ?f))
  :ordered-subtasks(and (t1 (depart ?f ?p)) (t2 (do_check_floor ?f))) ) 

(:method m3_do_check_floor
  :parameters ( ?f - floor ?p - passenger )
  :task (do_check_floor ?f)
  :precondition(and (lift-at ?f) (origin ?p ?f) (not (boarded ?p)) (not (served ?p)))
  :ordered-subtasks(and (t1 (board ?f ?p)) (t2 (do_check_floor ?f))) ) 

(:method m4_do_take_all
  :parameters ( ?f - floor )
  :task (do_take_all ?f)
  :precondition(and (lift-at ?f))
  :ordered-subtasks(and (t1 (nop))) ) 

(:method m5_do_take_all
  :parameters ( ?f - floor ?to - floor ?p - passenger )
  :task (do_take_all ?f)
  :precondition(and (lift-at ?f) (above ?f ?to) (not(boarded ?p)) (origin ?p ?to) (not (served ?p)))
  :ordered-subtasks(and (t1 (up ?f ?to)) (t3 (do_check_floor ?to)) (t4 (do_take_all ?to))) ) 

(:method m6_do_take_all
  :parameters ( ?f - floor ?to - floor ?p - passenger )
  :task (do_take_all ?f)
  :precondition(and (lift-at ?f) (above ?to ?f) (not(boarded ?p)) (origin ?p ?to) (not (served ?p)))
  :ordered-subtasks(and (t1 (down ?f ?to)) (t2 (do_check_floor ?to)) (t3 (do_take_all ?to))) ) 

(:method m7_do_start_throw_all
  :parameters ( ?f - floor )
  :task (do_start_throw_all )
  :precondition(and (lift-at ?f))
  :ordered-subtasks(and (t1 (do_throw_all ?f))) ) 

(:method m8_do_throw_all
  :parameters ( ?f - floor )
  :task (do_throw_all ?f)
  :precondition(and (lift-at ?f))
  :ordered-subtasks(and (t1 (nop))) ) 

(:method m9_do_throw_all
  :parameters ( ?f - floor ?to - floor ?p - passenger )
  :task (do_throw_all ?f)
  :precondition(and (lift-at ?f) (above ?f ?to) (boarded ?p) (destin ?p ?to))
  :ordered-subtasks(and (t1 (up ?f ?to)) (t2 (do_check_floor ?to)) (t3 (do_throw_all ?to))) ) 

(:method m10_do_throw_all
  :parameters ( ?f - floor ?to - floor ?p - passenger )
  :task (do_throw_all ?f)
  :precondition(and (lift-at ?f) (above ?to ?f) (boarded ?p) (destin ?p ?to))
  :ordered-subtasks(and (t1 (down ?f ?to)) (t2 (do_check_floor ?to)) (t3 (do_throw_all ?to))) ) 

(:action board
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (origin ?p ?f))
  :effect (boarded ?p))

(:action depart
  :parameters (?f - floor ?p - passenger)
  :precondition (and (lift-at ?f) (destin ?p ?f) (boarded ?p))
  :effect (and (not (boarded ?p)) (served ?p)))

(:action up
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f1 ?f2))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action down
  :parameters (?f1 - floor ?f2 - floor)
  :precondition (and (lift-at ?f1) (above ?f2 ?f1))
  :effect (and (lift-at ?f2) (not (lift-at ?f1))))

(:action nop
  :parameters ()
  :precondition ()
  :effect ())
)
